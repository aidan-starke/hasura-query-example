schema {
	query: query_root
	mutation: mutation_root
	subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
	"""
	measured in seconds
	"""
	ttl: Int! = 60

	"""
	refresh the cache entry
	"""
	refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
	_eq: String
	_gt: String
	_gte: String

	"""
	does the column match the given case-insensitive pattern
	"""
	_ilike: String
	_in: [String!]

	"""
	does the column match the given POSIX regular expression, case insensitive
	"""
	_iregex: String
	_is_null: Boolean

	"""
	does the column match the given pattern
	"""
	_like: String
	_lt: String
	_lte: String
	_neq: String

	"""
	does the column NOT match the given case-insensitive pattern
	"""
	_nilike: String
	_nin: [String!]

	"""
	does the column NOT match the given POSIX regular expression, case insensitive
	"""
	_niregex: String

	"""
	does the column NOT match the given pattern
	"""
	_nlike: String

	"""
	does the column NOT match the given POSIX regular expression, case sensitive
	"""
	_nregex: String

	"""
	does the column NOT match the given SQL regular expression
	"""
	_nsimilar: String

	"""
	does the column match the given POSIX regular expression, case sensitive
	"""
	_regex: String

	"""
	does the column match the given SQL regular expression
	"""
	_similar: String
}

"""
columns and relationships of "comments"
"""
type comments {
	content: String!
	created_at: timestamptz!
	id: Int!

	"""
	An object relationship
	"""
	post: posts!
	post_id: Int!
	updated_at: timestamptz!

	"""
	An object relationship
	"""
	user: users!
	user_id: Int!
}

"""
aggregated selection of "comments"
"""
type comments_aggregate {
	aggregate: comments_aggregate_fields
	nodes: [comments!]!
}

"""
aggregate fields of "comments"
"""
type comments_aggregate_fields {
	avg: comments_avg_fields
	count(columns: [comments_select_column!], distinct: Boolean): Int!
	max: comments_max_fields
	min: comments_min_fields
	stddev: comments_stddev_fields
	stddev_pop: comments_stddev_pop_fields
	stddev_samp: comments_stddev_samp_fields
	sum: comments_sum_fields
	var_pop: comments_var_pop_fields
	var_samp: comments_var_samp_fields
	variance: comments_variance_fields
}

"""
order by aggregate values of table "comments"
"""
input comments_aggregate_order_by {
	avg: comments_avg_order_by
	count: order_by
	max: comments_max_order_by
	min: comments_min_order_by
	stddev: comments_stddev_order_by
	stddev_pop: comments_stddev_pop_order_by
	stddev_samp: comments_stddev_samp_order_by
	sum: comments_sum_order_by
	var_pop: comments_var_pop_order_by
	var_samp: comments_var_samp_order_by
	variance: comments_variance_order_by
}

"""
input type for inserting array relation for remote table "comments"
"""
input comments_arr_rel_insert_input {
	data: [comments_insert_input!]!

	"""
	upsert condition
	"""
	on_conflict: comments_on_conflict
}

"""
aggregate avg on columns
"""
type comments_avg_fields {
	id: Float
	post_id: Float
	user_id: Float
}

"""
order by avg() on columns of table "comments"
"""
input comments_avg_order_by {
	id: order_by
	post_id: order_by
	user_id: order_by
}

"""
Boolean expression to filter rows from the table "comments". All fields are combined with a logical 'AND'.
"""
input comments_bool_exp {
	_and: [comments_bool_exp!]
	_not: comments_bool_exp
	_or: [comments_bool_exp!]
	content: String_comparison_exp
	created_at: timestamptz_comparison_exp
	id: Int_comparison_exp
	post: posts_bool_exp
	post_id: Int_comparison_exp
	updated_at: timestamptz_comparison_exp
	user: users_bool_exp
	user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "comments"
"""
enum comments_constraint {
	"""
	unique or primary key constraint on columns "id"
	"""
	comments_pkey
}

"""
input type for incrementing numeric columns in table "comments"
"""
input comments_inc_input {
	id: Int
	post_id: Int
	user_id: Int
}

"""
input type for inserting data into table "comments"
"""
input comments_insert_input {
	content: String
	created_at: timestamptz
	id: Int
	post: posts_obj_rel_insert_input
	post_id: Int
	updated_at: timestamptz
	user: users_obj_rel_insert_input
	user_id: Int
}

"""
aggregate max on columns
"""
type comments_max_fields {
	content: String
	created_at: timestamptz
	id: Int
	post_id: Int
	updated_at: timestamptz
	user_id: Int
}

"""
order by max() on columns of table "comments"
"""
input comments_max_order_by {
	content: order_by
	created_at: order_by
	id: order_by
	post_id: order_by
	updated_at: order_by
	user_id: order_by
}

"""
aggregate min on columns
"""
type comments_min_fields {
	content: String
	created_at: timestamptz
	id: Int
	post_id: Int
	updated_at: timestamptz
	user_id: Int
}

"""
order by min() on columns of table "comments"
"""
input comments_min_order_by {
	content: order_by
	created_at: order_by
	id: order_by
	post_id: order_by
	updated_at: order_by
	user_id: order_by
}

"""
response of any mutation on the table "comments"
"""
type comments_mutation_response {
	"""
	number of rows affected by the mutation
	"""
	affected_rows: Int!

	"""
	data from the rows affected by the mutation
	"""
	returning: [comments!]!
}

"""
on_conflict condition type for table "comments"
"""
input comments_on_conflict {
	constraint: comments_constraint!
	update_columns: [comments_update_column!]! = []
	where: comments_bool_exp
}

"""
Ordering options when selecting data from "comments".
"""
input comments_order_by {
	content: order_by
	created_at: order_by
	id: order_by
	post: posts_order_by
	post_id: order_by
	updated_at: order_by
	user: users_order_by
	user_id: order_by
}

"""
primary key columns input for table: comments
"""
input comments_pk_columns_input {
	id: Int!
}

"""
select columns of table "comments"
"""
enum comments_select_column {
	"""
	column name
	"""
	content

	"""
	column name
	"""
	created_at

	"""
	column name
	"""
	id

	"""
	column name
	"""
	post_id

	"""
	column name
	"""
	updated_at

	"""
	column name
	"""
	user_id
}

"""
input type for updating data in table "comments"
"""
input comments_set_input {
	content: String
	created_at: timestamptz
	id: Int
	post_id: Int
	updated_at: timestamptz
	user_id: Int
}

"""
aggregate stddev on columns
"""
type comments_stddev_fields {
	id: Float
	post_id: Float
	user_id: Float
}

"""
order by stddev() on columns of table "comments"
"""
input comments_stddev_order_by {
	id: order_by
	post_id: order_by
	user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type comments_stddev_pop_fields {
	id: Float
	post_id: Float
	user_id: Float
}

"""
order by stddev_pop() on columns of table "comments"
"""
input comments_stddev_pop_order_by {
	id: order_by
	post_id: order_by
	user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type comments_stddev_samp_fields {
	id: Float
	post_id: Float
	user_id: Float
}

"""
order by stddev_samp() on columns of table "comments"
"""
input comments_stddev_samp_order_by {
	id: order_by
	post_id: order_by
	user_id: order_by
}

"""
aggregate sum on columns
"""
type comments_sum_fields {
	id: Int
	post_id: Int
	user_id: Int
}

"""
order by sum() on columns of table "comments"
"""
input comments_sum_order_by {
	id: order_by
	post_id: order_by
	user_id: order_by
}

"""
update columns of table "comments"
"""
enum comments_update_column {
	"""
	column name
	"""
	content

	"""
	column name
	"""
	created_at

	"""
	column name
	"""
	id

	"""
	column name
	"""
	post_id

	"""
	column name
	"""
	updated_at

	"""
	column name
	"""
	user_id
}

"""
aggregate var_pop on columns
"""
type comments_var_pop_fields {
	id: Float
	post_id: Float
	user_id: Float
}

"""
order by var_pop() on columns of table "comments"
"""
input comments_var_pop_order_by {
	id: order_by
	post_id: order_by
	user_id: order_by
}

"""
aggregate var_samp on columns
"""
type comments_var_samp_fields {
	id: Float
	post_id: Float
	user_id: Float
}

"""
order by var_samp() on columns of table "comments"
"""
input comments_var_samp_order_by {
	id: order_by
	post_id: order_by
	user_id: order_by
}

"""
aggregate variance on columns
"""
type comments_variance_fields {
	id: Float
	post_id: Float
	user_id: Float
}

"""
order by variance() on columns of table "comments"
"""
input comments_variance_order_by {
	id: order_by
	post_id: order_by
	user_id: order_by
}

"""
mutation root
"""
type mutation_root {
	"""
	delete data from the table: "comments"
	"""
	delete_comments(
		"""
		filter the rows which have to be deleted
		"""
		where: comments_bool_exp!
	): comments_mutation_response

	"""
	delete single row from the table: "comments"
	"""
	delete_comments_by_pk(id: Int!): comments

	"""
	delete data from the table: "posts"
	"""
	delete_posts(
		"""
		filter the rows which have to be deleted
		"""
		where: posts_bool_exp!
	): posts_mutation_response

	"""
	delete single row from the table: "posts"
	"""
	delete_posts_by_pk(id: Int!): posts

	"""
	delete data from the table: "users"
	"""
	delete_users(
		"""
		filter the rows which have to be deleted
		"""
		where: users_bool_exp!
	): users_mutation_response

	"""
	delete single row from the table: "users"
	"""
	delete_users_by_pk(id: Int!): users

	"""
	insert data into the table: "comments"
	"""
	insert_comments(
		"""
		the rows to be inserted
		"""
		objects: [comments_insert_input!]!

		"""
		upsert condition
		"""
		on_conflict: comments_on_conflict
	): comments_mutation_response

	"""
	insert a single row into the table: "comments"
	"""
	insert_comments_one(
		"""
		the row to be inserted
		"""
		object: comments_insert_input!

		"""
		upsert condition
		"""
		on_conflict: comments_on_conflict
	): comments

	"""
	insert data into the table: "posts"
	"""
	insert_posts(
		"""
		the rows to be inserted
		"""
		objects: [posts_insert_input!]!

		"""
		upsert condition
		"""
		on_conflict: posts_on_conflict
	): posts_mutation_response

	"""
	insert a single row into the table: "posts"
	"""
	insert_posts_one(
		"""
		the row to be inserted
		"""
		object: posts_insert_input!

		"""
		upsert condition
		"""
		on_conflict: posts_on_conflict
	): posts

	"""
	insert data into the table: "users"
	"""
	insert_users(
		"""
		the rows to be inserted
		"""
		objects: [users_insert_input!]!

		"""
		upsert condition
		"""
		on_conflict: users_on_conflict
	): users_mutation_response

	"""
	insert a single row into the table: "users"
	"""
	insert_users_one(
		"""
		the row to be inserted
		"""
		object: users_insert_input!

		"""
		upsert condition
		"""
		on_conflict: users_on_conflict
	): users

	"""
	update data of the table: "comments"
	"""
	update_comments(
		"""
		increments the numeric columns with given value of the filtered values
		"""
		_inc: comments_inc_input

		"""
		sets the columns of the filtered rows to the given values
		"""
		_set: comments_set_input

		"""
		filter the rows which have to be updated
		"""
		where: comments_bool_exp!
	): comments_mutation_response

	"""
	update single row of the table: "comments"
	"""
	update_comments_by_pk(
		"""
		increments the numeric columns with given value of the filtered values
		"""
		_inc: comments_inc_input

		"""
		sets the columns of the filtered rows to the given values
		"""
		_set: comments_set_input
		pk_columns: comments_pk_columns_input!
	): comments

	"""
	update data of the table: "posts"
	"""
	update_posts(
		"""
		increments the numeric columns with given value of the filtered values
		"""
		_inc: posts_inc_input

		"""
		sets the columns of the filtered rows to the given values
		"""
		_set: posts_set_input

		"""
		filter the rows which have to be updated
		"""
		where: posts_bool_exp!
	): posts_mutation_response

	"""
	update single row of the table: "posts"
	"""
	update_posts_by_pk(
		"""
		increments the numeric columns with given value of the filtered values
		"""
		_inc: posts_inc_input

		"""
		sets the columns of the filtered rows to the given values
		"""
		_set: posts_set_input
		pk_columns: posts_pk_columns_input!
	): posts

	"""
	update data of the table: "users"
	"""
	update_users(
		"""
		increments the numeric columns with given value of the filtered values
		"""
		_inc: users_inc_input

		"""
		sets the columns of the filtered rows to the given values
		"""
		_set: users_set_input

		"""
		filter the rows which have to be updated
		"""
		where: users_bool_exp!
	): users_mutation_response

	"""
	update single row of the table: "users"
	"""
	update_users_by_pk(
		"""
		increments the numeric columns with given value of the filtered values
		"""
		_inc: users_inc_input

		"""
		sets the columns of the filtered rows to the given values
		"""
		_set: users_set_input
		pk_columns: users_pk_columns_input!
	): users
}

"""
column ordering options
"""
enum order_by {
	"""
	in ascending order, nulls last
	"""
	asc

	"""
	in ascending order, nulls first
	"""
	asc_nulls_first

	"""
	in ascending order, nulls last
	"""
	asc_nulls_last

	"""
	in descending order, nulls first
	"""
	desc

	"""
	in descending order, nulls first
	"""
	desc_nulls_first

	"""
	in descending order, nulls last
	"""
	desc_nulls_last
}

"""
columns and relationships of "posts"
"""
type posts {
	"""
	An array relationship
	"""
	comments(
		"""
		distinct select on columns
		"""
		distinct_on: [comments_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [comments_order_by!]

		"""
		filter the rows returned
		"""
		where: comments_bool_exp
	): [comments!]!

	"""
	An aggregate relationship
	"""
	comments_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [comments_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [comments_order_by!]

		"""
		filter the rows returned
		"""
		where: comments_bool_exp
	): comments_aggregate!
	content: String!
	created_at: timestamptz!
	id: Int!
	title: String!
	updated_at: timestamptz!

	"""
	An object relationship
	"""
	user: users!
	user_id: Int!
}

"""
aggregated selection of "posts"
"""
type posts_aggregate {
	aggregate: posts_aggregate_fields
	nodes: [posts!]!
}

"""
aggregate fields of "posts"
"""
type posts_aggregate_fields {
	avg: posts_avg_fields
	count(columns: [posts_select_column!], distinct: Boolean): Int!
	max: posts_max_fields
	min: posts_min_fields
	stddev: posts_stddev_fields
	stddev_pop: posts_stddev_pop_fields
	stddev_samp: posts_stddev_samp_fields
	sum: posts_sum_fields
	var_pop: posts_var_pop_fields
	var_samp: posts_var_samp_fields
	variance: posts_variance_fields
}

"""
order by aggregate values of table "posts"
"""
input posts_aggregate_order_by {
	avg: posts_avg_order_by
	count: order_by
	max: posts_max_order_by
	min: posts_min_order_by
	stddev: posts_stddev_order_by
	stddev_pop: posts_stddev_pop_order_by
	stddev_samp: posts_stddev_samp_order_by
	sum: posts_sum_order_by
	var_pop: posts_var_pop_order_by
	var_samp: posts_var_samp_order_by
	variance: posts_variance_order_by
}

"""
input type for inserting array relation for remote table "posts"
"""
input posts_arr_rel_insert_input {
	data: [posts_insert_input!]!

	"""
	upsert condition
	"""
	on_conflict: posts_on_conflict
}

"""
aggregate avg on columns
"""
type posts_avg_fields {
	id: Float
	user_id: Float
}

"""
order by avg() on columns of table "posts"
"""
input posts_avg_order_by {
	id: order_by
	user_id: order_by
}

"""
Boolean expression to filter rows from the table "posts". All fields are combined with a logical 'AND'.
"""
input posts_bool_exp {
	_and: [posts_bool_exp!]
	_not: posts_bool_exp
	_or: [posts_bool_exp!]
	comments: comments_bool_exp
	content: String_comparison_exp
	created_at: timestamptz_comparison_exp
	id: Int_comparison_exp
	title: String_comparison_exp
	updated_at: timestamptz_comparison_exp
	user: users_bool_exp
	user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "posts"
"""
enum posts_constraint {
	"""
	unique or primary key constraint on columns "id"
	"""
	posts_pkey
}

"""
input type for incrementing numeric columns in table "posts"
"""
input posts_inc_input {
	id: Int
	user_id: Int
}

"""
input type for inserting data into table "posts"
"""
input posts_insert_input {
	comments: comments_arr_rel_insert_input
	content: String
	created_at: timestamptz
	id: Int
	title: String
	updated_at: timestamptz
	user: users_obj_rel_insert_input
	user_id: Int
}

"""
aggregate max on columns
"""
type posts_max_fields {
	content: String
	created_at: timestamptz
	id: Int
	title: String
	updated_at: timestamptz
	user_id: Int
}

"""
order by max() on columns of table "posts"
"""
input posts_max_order_by {
	content: order_by
	created_at: order_by
	id: order_by
	title: order_by
	updated_at: order_by
	user_id: order_by
}

"""
aggregate min on columns
"""
type posts_min_fields {
	content: String
	created_at: timestamptz
	id: Int
	title: String
	updated_at: timestamptz
	user_id: Int
}

"""
order by min() on columns of table "posts"
"""
input posts_min_order_by {
	content: order_by
	created_at: order_by
	id: order_by
	title: order_by
	updated_at: order_by
	user_id: order_by
}

"""
response of any mutation on the table "posts"
"""
type posts_mutation_response {
	"""
	number of rows affected by the mutation
	"""
	affected_rows: Int!

	"""
	data from the rows affected by the mutation
	"""
	returning: [posts!]!
}

"""
input type for inserting object relation for remote table "posts"
"""
input posts_obj_rel_insert_input {
	data: posts_insert_input!

	"""
	upsert condition
	"""
	on_conflict: posts_on_conflict
}

"""
on_conflict condition type for table "posts"
"""
input posts_on_conflict {
	constraint: posts_constraint!
	update_columns: [posts_update_column!]! = []
	where: posts_bool_exp
}

"""
Ordering options when selecting data from "posts".
"""
input posts_order_by {
	comments_aggregate: comments_aggregate_order_by
	content: order_by
	created_at: order_by
	id: order_by
	title: order_by
	updated_at: order_by
	user: users_order_by
	user_id: order_by
}

"""
primary key columns input for table: posts
"""
input posts_pk_columns_input {
	id: Int!
}

"""
select columns of table "posts"
"""
enum posts_select_column {
	"""
	column name
	"""
	content

	"""
	column name
	"""
	created_at

	"""
	column name
	"""
	id

	"""
	column name
	"""
	title

	"""
	column name
	"""
	updated_at

	"""
	column name
	"""
	user_id
}

"""
input type for updating data in table "posts"
"""
input posts_set_input {
	content: String
	created_at: timestamptz
	id: Int
	title: String
	updated_at: timestamptz
	user_id: Int
}

"""
aggregate stddev on columns
"""
type posts_stddev_fields {
	id: Float
	user_id: Float
}

"""
order by stddev() on columns of table "posts"
"""
input posts_stddev_order_by {
	id: order_by
	user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type posts_stddev_pop_fields {
	id: Float
	user_id: Float
}

"""
order by stddev_pop() on columns of table "posts"
"""
input posts_stddev_pop_order_by {
	id: order_by
	user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type posts_stddev_samp_fields {
	id: Float
	user_id: Float
}

"""
order by stddev_samp() on columns of table "posts"
"""
input posts_stddev_samp_order_by {
	id: order_by
	user_id: order_by
}

"""
aggregate sum on columns
"""
type posts_sum_fields {
	id: Int
	user_id: Int
}

"""
order by sum() on columns of table "posts"
"""
input posts_sum_order_by {
	id: order_by
	user_id: order_by
}

"""
update columns of table "posts"
"""
enum posts_update_column {
	"""
	column name
	"""
	content

	"""
	column name
	"""
	created_at

	"""
	column name
	"""
	id

	"""
	column name
	"""
	title

	"""
	column name
	"""
	updated_at

	"""
	column name
	"""
	user_id
}

"""
aggregate var_pop on columns
"""
type posts_var_pop_fields {
	id: Float
	user_id: Float
}

"""
order by var_pop() on columns of table "posts"
"""
input posts_var_pop_order_by {
	id: order_by
	user_id: order_by
}

"""
aggregate var_samp on columns
"""
type posts_var_samp_fields {
	id: Float
	user_id: Float
}

"""
order by var_samp() on columns of table "posts"
"""
input posts_var_samp_order_by {
	id: order_by
	user_id: order_by
}

"""
aggregate variance on columns
"""
type posts_variance_fields {
	id: Float
	user_id: Float
}

"""
order by variance() on columns of table "posts"
"""
input posts_variance_order_by {
	id: order_by
	user_id: order_by
}

type query_root {
	"""
	An array relationship
	"""
	comments(
		"""
		distinct select on columns
		"""
		distinct_on: [comments_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [comments_order_by!]

		"""
		filter the rows returned
		"""
		where: comments_bool_exp
	): [comments!]!

	"""
	An aggregate relationship
	"""
	comments_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [comments_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [comments_order_by!]

		"""
		filter the rows returned
		"""
		where: comments_bool_exp
	): comments_aggregate!

	"""
	fetch data from the table: "comments" using primary key columns
	"""
	comments_by_pk(id: Int!): comments

	"""
	An array relationship
	"""
	posts(
		"""
		distinct select on columns
		"""
		distinct_on: [posts_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [posts_order_by!]

		"""
		filter the rows returned
		"""
		where: posts_bool_exp
	): [posts!]!

	"""
	An aggregate relationship
	"""
	posts_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [posts_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [posts_order_by!]

		"""
		filter the rows returned
		"""
		where: posts_bool_exp
	): posts_aggregate!

	"""
	fetch data from the table: "posts" using primary key columns
	"""
	posts_by_pk(id: Int!): posts

	"""
	fetch data from the table: "users"
	"""
	users(
		"""
		distinct select on columns
		"""
		distinct_on: [users_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [users_order_by!]

		"""
		filter the rows returned
		"""
		where: users_bool_exp
	): [users!]!

	"""
	fetch aggregated fields from the table: "users"
	"""
	users_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [users_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [users_order_by!]

		"""
		filter the rows returned
		"""
		where: users_bool_exp
	): users_aggregate!

	"""
	fetch data from the table: "users" using primary key columns
	"""
	users_by_pk(id: Int!): users
}

type subscription_root {
	"""
	An array relationship
	"""
	comments(
		"""
		distinct select on columns
		"""
		distinct_on: [comments_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [comments_order_by!]

		"""
		filter the rows returned
		"""
		where: comments_bool_exp
	): [comments!]!

	"""
	An aggregate relationship
	"""
	comments_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [comments_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [comments_order_by!]

		"""
		filter the rows returned
		"""
		where: comments_bool_exp
	): comments_aggregate!

	"""
	fetch data from the table: "comments" using primary key columns
	"""
	comments_by_pk(id: Int!): comments

	"""
	An array relationship
	"""
	posts(
		"""
		distinct select on columns
		"""
		distinct_on: [posts_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [posts_order_by!]

		"""
		filter the rows returned
		"""
		where: posts_bool_exp
	): [posts!]!

	"""
	An aggregate relationship
	"""
	posts_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [posts_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [posts_order_by!]

		"""
		filter the rows returned
		"""
		where: posts_bool_exp
	): posts_aggregate!

	"""
	fetch data from the table: "posts" using primary key columns
	"""
	posts_by_pk(id: Int!): posts

	"""
	fetch data from the table: "users"
	"""
	users(
		"""
		distinct select on columns
		"""
		distinct_on: [users_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [users_order_by!]

		"""
		filter the rows returned
		"""
		where: users_bool_exp
	): [users!]!

	"""
	fetch aggregated fields from the table: "users"
	"""
	users_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [users_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [users_order_by!]

		"""
		filter the rows returned
		"""
		where: users_bool_exp
	): users_aggregate!

	"""
	fetch data from the table: "users" using primary key columns
	"""
	users_by_pk(id: Int!): users
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
	_eq: timestamptz
	_gt: timestamptz
	_gte: timestamptz
	_in: [timestamptz!]
	_is_null: Boolean
	_lt: timestamptz
	_lte: timestamptz
	_neq: timestamptz
	_nin: [timestamptz!]
}

"""
columns and relationships of "users"
"""
type users {
	age: Int!

	"""
	An array relationship
	"""
	comments(
		"""
		distinct select on columns
		"""
		distinct_on: [comments_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [comments_order_by!]

		"""
		filter the rows returned
		"""
		where: comments_bool_exp
	): [comments!]!

	"""
	An aggregate relationship
	"""
	comments_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [comments_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [comments_order_by!]

		"""
		filter the rows returned
		"""
		where: comments_bool_exp
	): comments_aggregate!
	gender: Boolean
	id: Int!

	"""
	An array relationship
	"""
	posts(
		"""
		distinct select on columns
		"""
		distinct_on: [posts_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [posts_order_by!]

		"""
		filter the rows returned
		"""
		where: posts_bool_exp
	): [posts!]!

	"""
	An aggregate relationship
	"""
	posts_aggregate(
		"""
		distinct select on columns
		"""
		distinct_on: [posts_select_column!]

		"""
		limit the number of rows returned
		"""
		limit: Int

		"""
		skip the first n rows. Use only with order_by
		"""
		offset: Int

		"""
		sort the rows by one or more columns
		"""
		order_by: [posts_order_by!]

		"""
		filter the rows returned
		"""
		where: posts_bool_exp
	): posts_aggregate!
	username: String!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
	aggregate: users_aggregate_fields
	nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
	avg: users_avg_fields
	count(columns: [users_select_column!], distinct: Boolean): Int!
	max: users_max_fields
	min: users_min_fields
	stddev: users_stddev_fields
	stddev_pop: users_stddev_pop_fields
	stddev_samp: users_stddev_samp_fields
	sum: users_sum_fields
	var_pop: users_var_pop_fields
	var_samp: users_var_samp_fields
	variance: users_variance_fields
}

"""
aggregate avg on columns
"""
type users_avg_fields {
	age: Float
	id: Float
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
	_and: [users_bool_exp!]
	_not: users_bool_exp
	_or: [users_bool_exp!]
	age: Int_comparison_exp
	comments: comments_bool_exp
	gender: Boolean_comparison_exp
	id: Int_comparison_exp
	posts: posts_bool_exp
	username: String_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
	"""
	unique or primary key constraint on columns "id"
	"""
	users_pkey

	"""
	unique or primary key constraint on columns "username"
	"""
	users_username_key
}

"""
input type for incrementing numeric columns in table "users"
"""
input users_inc_input {
	age: Int
	id: Int
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
	age: Int
	comments: comments_arr_rel_insert_input
	gender: Boolean
	id: Int
	posts: posts_arr_rel_insert_input
	username: String
}

"""
aggregate max on columns
"""
type users_max_fields {
	age: Int
	id: Int
	username: String
}

"""
aggregate min on columns
"""
type users_min_fields {
	age: Int
	id: Int
	username: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
	"""
	number of rows affected by the mutation
	"""
	affected_rows: Int!

	"""
	data from the rows affected by the mutation
	"""
	returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
	data: users_insert_input!

	"""
	upsert condition
	"""
	on_conflict: users_on_conflict
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
	constraint: users_constraint!
	update_columns: [users_update_column!]! = []
	where: users_bool_exp
}

"""
Ordering options when selecting data from "users".
"""
input users_order_by {
	age: order_by
	comments_aggregate: comments_aggregate_order_by
	gender: order_by
	id: order_by
	posts_aggregate: posts_aggregate_order_by
	username: order_by
}

"""
primary key columns input for table: users
"""
input users_pk_columns_input {
	id: Int!
}

"""
select columns of table "users"
"""
enum users_select_column {
	"""
	column name
	"""
	age

	"""
	column name
	"""
	gender

	"""
	column name
	"""
	id

	"""
	column name
	"""
	username
}

"""
input type for updating data in table "users"
"""
input users_set_input {
	age: Int
	gender: Boolean
	id: Int
	username: String
}

"""
aggregate stddev on columns
"""
type users_stddev_fields {
	age: Float
	id: Float
}

"""
aggregate stddev_pop on columns
"""
type users_stddev_pop_fields {
	age: Float
	id: Float
}

"""
aggregate stddev_samp on columns
"""
type users_stddev_samp_fields {
	age: Float
	id: Float
}

"""
aggregate sum on columns
"""
type users_sum_fields {
	age: Int
	id: Int
}

"""
update columns of table "users"
"""
enum users_update_column {
	"""
	column name
	"""
	age

	"""
	column name
	"""
	gender

	"""
	column name
	"""
	id

	"""
	column name
	"""
	username
}

"""
aggregate var_pop on columns
"""
type users_var_pop_fields {
	age: Float
	id: Float
}

"""
aggregate var_samp on columns
"""
type users_var_samp_fields {
	age: Float
	id: Float
}

"""
aggregate variance on columns
"""
type users_variance_fields {
	age: Float
	id: Float
}
